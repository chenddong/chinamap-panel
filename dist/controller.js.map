{"version":3,"sources":["../src/controller.js"],"names":["MetricsPanelCtrl","_","kbn","TimeSeries","DataFormatter","echarts","china","Controller","$scope","$injector","$rootScope","optionDefaults","type","legend","show","values","links","datasource","maxDataPoints","interval","targets","cacheTimeout","nullPointMode","legendType","aliasColors","format","valueName","strokeWidth","fontSize","thresholds","unitSingle","unitPlural","esMetric","console","dir","panel","defaults","dataFormatter","events","on","onRender","bind","onDataReceived","onDataError","onInitEditMode","info","trace","dataList","data","setGeohashValues","render","xAxis","seriesData","addEditorTab","unitFormats","getUnitFormats","series","datapoints","alias","target","flotpairs","getFlotPairs","scope","elem","attrs","ctrl","renderHandler","dom","find","chinaMap","incrementRenderCounter","height","setElementHeight","init","get","buildChart","renderingCompleted","row","isString","parseInt","replace","title","css","e","log","name","value","option","tooltip","trigger","orient","left","visualMap","min","max","calculable","color","mapType","hoverable","roam","itemStyle","normal","label","areaColor","emphasis","mapLocation","y","x","setOption","window","$","getJSON","then","chinaJson","registerMap","templateUrl"],"mappings":"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","file":"controller.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk';\r\nimport _ from 'lodash';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport TimeSeries from 'app/core/time_series2';\r\n\r\nimport DataFormatter from './data_formatter';\r\n\r\nimport echarts from 'echarts';\r\nimport china from 'china';\r\n\r\nexport class Controller extends MetricsPanelCtrl {\r\n    constructor($scope, $injector, $rootScope) {\r\n        super($scope, $injector);\r\n        this.$rootScope = $rootScope;\r\n\r\n        const optionDefaults = {\r\n            type: 'map',\r\n            legend: {\r\n                show: false, // disable/enable legend\r\n                values: true\r\n            },\r\n            links: [],\r\n            datasource: null,\r\n            maxDataPoints: 3,\r\n            interval: null,\r\n            targets: [{}],\r\n            cacheTimeout: null,\r\n            nullPointMode: 'connected',\r\n            legendType: 'Under graph',\r\n            aliasColors: {},\r\n            format: 'short',\r\n            valueName: 'current',\r\n            strokeWidth: 1,\r\n            fontSize: '80%',\r\n            thresholds: '0,200',\r\n            unitSingle: '',\r\n            unitPlural: '',\r\n            esMetric: 'Count',\r\n        };\r\n\r\n        console.dir(this.panel);\r\n        _.defaults(this.panel, optionDefaults);\r\n        _.defaults(this.panel.legend, optionDefaults.legend);\r\n\r\n        this.dataFormatter = new DataFormatter(this, kbn);\r\n        // this.loadLocationDataFromFile();\r\n        this.events.on('render', this.onRender.bind(this));\r\n        this.events.on('data-received', this.onDataReceived.bind(this));\r\n        this.events.on('data-error', this.onDataError.bind(this));\r\n        this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\r\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n    }\r\n\r\n    onRender() {\r\n        console.info('onRender trigger')\r\n        console.trace();\r\n    }\r\n\r\n    onDataReceived(dataList) {\r\n        if (!dataList) return;\r\n        console.info('onDataReceived trigger')\r\n        console.dir(dataList);\r\n        const data  = [];\r\n        \r\n        this.dataFormatter.setGeohashValues(dataList, data);\r\n        console.dir(data);\r\n     \r\n        this.data = data;\r\n\r\n        this.render();\r\n    }\r\n\r\n    onDataError() {\r\n        this.xAxis = [];\r\n        this.seriesData = [];\r\n        this.render(); // 渲染界面\r\n    }\r\n\r\n    onInitEditMode() {\r\n        this.addEditorTab('ChinaMap', 'public/plugins/chinamap-panel/partials/editor.html', 2);\r\n        this.unitFormats = kbn.getUnitFormats();\r\n    }\r\n\r\n    seriesHandler(seriesData) {\r\n        const series = new TimeSeries({\r\n          datapoints: seriesData.datapoints,\r\n          alias: seriesData.target,\r\n        });\r\n\r\n        series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\r\n        return series;\r\n    }\r\n\r\n    link(scope, elem, attrs, ctrl) {\r\n        ctrl.events.on('render', () => {\r\n            renderHandler(false);\r\n        });\r\n\r\n        let dom = elem.find('.chinamap'),\r\n            panel, \r\n            chinaMap;\r\n\r\n        function renderHandler(incrementRenderCounter) {\r\n            if (!ctrl.xAxis || !ctrl.seriesData) { return; }\r\n\r\n            panel = ctrl.panel;\r\n    \r\n            let height = setElementHeight();\r\n            if (height != 0) {\r\n                if (!chinaMap)\r\n                    chinaMap = echarts.init(dom.get(0));\r\n\r\n                buildChart(height);\r\n            } \r\n\r\n            if (incrementRenderCounter){\r\n                ctrl.renderingCompleted();\r\n            }\r\n        }\r\n\r\n        function setElementHeight() {\r\n            try {\r\n                let height = ctrl.height || panel.height || ctrl.row.height;\r\n                if (_.isString(height)) {\r\n                    height = parseInt(height.replace('px', ''), 10);\r\n                }\r\n\r\n                height -= 5; // padding\r\n                height -= panel.title ? 24 : 9; // subtract panel title bar\r\n\r\n                dom.css('height', '500px');\r\n\r\n                return height;\r\n            } catch(e) { // IE throws errors sometimes\r\n                console.log('setElementHeight error......')\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        function buildChart(height) {\r\n            let data = [{name: '北京',value: 100 },\r\n                        {name: '天津',value: 50 },\r\n                        {name: '上海',value: 80 },\r\n                        {name: '重庆',value: 120 }]\r\n\r\n            if (ctrl.data){\r\n                data = ctrl.data;\r\n            }\r\n\r\n            const option = {\r\n                title : {\r\n                \r\n                },\r\n                tooltip : {\r\n                    trigger: 'item'\r\n                },\r\n                legend: {\r\n                    orient: 'vertical',\r\n                    left: 'left'\r\n                },\r\n                visualMap: {\r\n                    min: 0,\r\n                    max: 2000,         \r\n                    calculable: true,\r\n                    color: ['red','orange','yellow','lightgreen','green']\r\n                },\r\n                series : [\r\n                    {\r\n                        type: 'map',\r\n                        mapType: 'china',\r\n                        hoverable: true,\r\n                        roam:true,\r\n                        itemStyle:{\r\n                            normal:{label:{show:true}, areaColor: '#edf2f1'},\r\n                            emphasis:{label:{show:true}, areaColor: '#06060f'}\r\n                        },\r\n                        mapLocation: {\r\n                            y: \"center\",\r\n                            x: \"center\",\r\n                            height: \"500\"\r\n                        },\r\n                        label: {\r\n                            normal: {\r\n                                show: true\r\n                            },\r\n                            emphasis: {\r\n                                show: true\r\n                            }\r\n                        },\r\n                        data: data\r\n                    }\r\n                ]\r\n            };\r\n\r\n            chinaMap.setOption(option);\r\n\r\n            window.$.getJSON('public/plugins/chinamap-panel/data/china.json').then((chinaJson) => {\r\n                echarts.registerMap('china', chinaJson);\r\n                chinaMap.series.type = 'map';\r\n                chinaMap.series.mapType = 'china';\r\n            }); \r\n        }\r\n    }\r\n\r\n}\r\n\r\nController.templateUrl = './partials/module.html';\r\n"]}